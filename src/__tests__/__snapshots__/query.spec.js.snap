// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should render a loading query 1`] = `"loading"`;

exports[`should render a success query 1`] = `"fakeViewerId"`;

exports[`should render an error query 1`] = `"self.body.on is not a function"`;

exports[`should use a function to create variables 1`] = `
Query {
  "context": Object {
    "environment": RelayModernEnvironment {
      "__setNet": [Function],
      "_deferrableSelections": Set {},
      "_network": Object {
        "execute": [Function],
      },
      "_publishQueue": RelayPublishQueue {
        "_appliedOptimisticUpdates": Set {},
        "_backup": Object {},
        "_handlerProvider": [Function],
        "_pendingBackupRebase": false,
        "_pendingData": Set {},
        "_pendingOptimisticUpdates": Set {},
        "_pendingUpdaters": Set {},
        "_store": RelayMarkSweepStore {
          "_gcEnabled": true,
          "_hasScheduledGC": false,
          "_index": 0,
          "_recordSource": Object {},
          "_roots": Map {},
          "_subscriptions": Set {},
          "_updatedRecordIDs": Object {},
        },
      },
      "_store": RelayMarkSweepStore {
        "_gcEnabled": true,
        "_hasScheduledGC": false,
        "_index": 0,
        "_recordSource": Object {},
        "_roots": Map {},
        "_subscriptions": Set {},
        "_updatedRecordIDs": Object {},
      },
      "configName": undefined,
      "unstable_internal": Object {
        "areEqualSelectors": [Function],
        "createFragmentSpecResolver": [Function],
        "createOperationSelector": [Function],
        "getDataIDsFromObject": [Function],
        "getFragment": [Function],
        "getRequest": [Function],
        "getSelector": [Function],
        "getSelectorList": [Function],
        "getSelectorsFromObject": [Function],
        "getVariablesFromObject": [Function],
      },
    },
  },
  "props": Object {},
  "refs": Object {},
  "state": Object {},
  "updater": Updater {
    "_callbacks": Array [],
    "_renderer": ReactShallowRenderer {
      "_context": Object {
        "environment": RelayModernEnvironment {
          "__setNet": [Function],
          "_deferrableSelections": Set {},
          "_network": Object {
            "execute": [Function],
          },
          "_publishQueue": RelayPublishQueue {
            "_appliedOptimisticUpdates": Set {},
            "_backup": Object {},
            "_handlerProvider": [Function],
            "_pendingBackupRebase": false,
            "_pendingData": Set {},
            "_pendingOptimisticUpdates": Set {},
            "_pendingUpdaters": Set {},
            "_store": RelayMarkSweepStore {
              "_gcEnabled": true,
              "_hasScheduledGC": false,
              "_index": 0,
              "_recordSource": Object {},
              "_roots": Map {},
              "_subscriptions": Set {},
              "_updatedRecordIDs": Object {},
            },
          },
          "_store": RelayMarkSweepStore {
            "_gcEnabled": true,
            "_hasScheduledGC": false,
            "_index": 0,
            "_recordSource": Object {},
            "_roots": Map {},
            "_subscriptions": Set {},
            "_updatedRecordIDs": Object {},
          },
          "configName": undefined,
          "unstable_internal": Object {
            "areEqualSelectors": [Function],
            "createFragmentSpecResolver": [Function],
            "createOperationSelector": [Function],
            "getDataIDsFromObject": [Function],
            "getFragment": [Function],
            "getRequest": [Function],
            "getSelector": [Function],
            "getSelectorList": [Function],
            "getSelectorsFromObject": [Function],
            "getVariablesFromObject": [Function],
          },
        },
      },
      "_element": <Query />,
      "_forcedUpdate": false,
      "_instance": [Circular],
      "_newState": null,
      "_rendered": <ReactRelayQueryRenderer
        environment={
          RelayModernEnvironment {
            "__setNet": [Function],
            "_deferrableSelections": Set {},
            "_network": Object {
              "execute": [Function],
            },
            "_publishQueue": RelayPublishQueue {
              "_appliedOptimisticUpdates": Set {},
              "_backup": Object {},
              "_handlerProvider": [Function],
              "_pendingBackupRebase": false,
              "_pendingData": Set {},
              "_pendingOptimisticUpdates": Set {},
              "_pendingUpdaters": Set {},
              "_store": RelayMarkSweepStore {
                "_gcEnabled": true,
                "_hasScheduledGC": false,
                "_index": 0,
                "_recordSource": Object {},
                "_roots": Map {},
                "_subscriptions": Set {},
                "_updatedRecordIDs": Object {},
              },
            },
            "_store": RelayMarkSweepStore {
              "_gcEnabled": true,
              "_hasScheduledGC": false,
              "_index": 0,
              "_recordSource": Object {},
              "_roots": Map {},
              "_subscriptions": Set {},
              "_updatedRecordIDs": Object {},
            },
            "configName": undefined,
            "unstable_internal": Object {
              "areEqualSelectors": [Function],
              "createFragmentSpecResolver": [Function],
              "createOperationSelector": [Function],
              "getDataIDsFromObject": [Function],
              "getFragment": [Function],
              "getRequest": [Function],
              "getSelector": [Function],
              "getSelectorList": [Function],
              "getSelectorsFromObject": [Function],
              "getVariablesFromObject": [Function],
            },
          }
        }
        query={[Function]}
        render={[Function]}
        variables={
          Object {
            "customVariable": "customValue",
          }
        }
      />,
      "_rendering": false,
      "_updater": [Circular],
    },
  },
}
`;
