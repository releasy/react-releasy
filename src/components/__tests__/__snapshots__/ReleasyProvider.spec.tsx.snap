// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should be capable to get Config statically 1`] = `
Config {
  "cache": null,
  "devTools": false,
  "link": Link {
    "fetch": [Function],
    "fetchTimeout": 30000,
    "headers": Object {},
    "retryDelays": Array [
      1000,
      3000,
      5000,
      10000,
    ],
    "url": "/graphql",
  },
  "networkLogger": false,
}
`;

exports[`should be capable to get Environment statically 1`] = `
RelayModernEnvironment {
  "__setNet": [Function],
  "_deferrableSelections": Set {},
  "_network": Object {
    "execute": [Function],
    "executeWithEvents": [Function],
  },
  "_publishQueue": RelayPublishQueue {
    "_appliedOptimisticUpdates": Set {},
    "_backup": Object {},
    "_handlerProvider": [Function],
    "_pendingBackupRebase": false,
    "_pendingData": Set {},
    "_pendingOptimisticUpdates": Set {},
    "_pendingUpdaters": Set {},
    "_store": RelayMarkSweepStore {
      "_gcEnabled": true,
      "_hasScheduledGC": false,
      "_index": 0,
      "_recordSource": Object {},
      "_roots": Map {},
      "_subscriptions": Set {},
      "_updatedRecordIDs": Object {},
    },
  },
  "_store": RelayMarkSweepStore {
    "_gcEnabled": true,
    "_hasScheduledGC": false,
    "_index": 0,
    "_recordSource": Object {},
    "_roots": Map {},
    "_subscriptions": Set {},
    "_updatedRecordIDs": Object {},
  },
  "configName": undefined,
  "unstable_internal": Object {
    "areEqualSelectors": [Function],
    "createFragmentSpecResolver": [Function],
    "createOperationSelector": [Function],
    "getDataIDsFromObject": [Function],
    "getFragment": [Function],
    "getRequest": [Function],
    "getSelector": [Function],
    "getSelectorList": [Function],
    "getSelectorsFromObject": [Function],
    "getVariablesFromObject": [Function],
  },
}
`;

exports[`should render a valid ReleasyProvider 1`] = `
ReleasyProvider {
  "context": Object {},
  "props": Object {
    "children": <div />,
    "config": Config {
      "cache": null,
      "devTools": false,
      "link": Link {
        "fetch": [Function],
        "fetchTimeout": 30000,
        "headers": Object {},
        "retryDelays": Array [
          1000,
          3000,
          5000,
          10000,
        ],
        "url": "/graphql",
      },
      "networkLogger": false,
    },
  },
  "refs": Object {},
  "setState": [Function],
  "state": Object {
    "globalContextValue": Object {
      "config": Config {
        "cache": null,
        "devTools": false,
        "link": Link {
          "fetch": [Function],
          "fetchTimeout": 30000,
          "headers": Object {},
          "retryDelays": Array [
            1000,
            3000,
            5000,
            10000,
          ],
          "url": "/graphql",
        },
        "networkLogger": false,
      },
      "environment": RelayModernEnvironment {
        "__setNet": [Function],
        "_deferrableSelections": Set {},
        "_network": Object {
          "execute": [Function],
          "executeWithEvents": [Function],
        },
        "_publishQueue": RelayPublishQueue {
          "_appliedOptimisticUpdates": Set {},
          "_backup": Object {},
          "_handlerProvider": [Function],
          "_pendingBackupRebase": false,
          "_pendingData": Set {},
          "_pendingOptimisticUpdates": Set {},
          "_pendingUpdaters": Set {},
          "_store": RelayMarkSweepStore {
            "_gcEnabled": true,
            "_hasScheduledGC": false,
            "_index": 0,
            "_recordSource": Object {},
            "_roots": Map {},
            "_subscriptions": Set {},
            "_updatedRecordIDs": Object {},
          },
        },
        "_store": RelayMarkSweepStore {
          "_gcEnabled": true,
          "_hasScheduledGC": false,
          "_index": 0,
          "_recordSource": Object {},
          "_roots": Map {},
          "_subscriptions": Set {},
          "_updatedRecordIDs": Object {},
        },
        "configName": undefined,
        "unstable_internal": Object {
          "areEqualSelectors": [Function],
          "createFragmentSpecResolver": [Function],
          "createOperationSelector": [Function],
          "getDataIDsFromObject": [Function],
          "getFragment": [Function],
          "getRequest": [Function],
          "getSelector": [Function],
          "getSelectorList": [Function],
          "getSelectorsFromObject": [Function],
          "getVariablesFromObject": [Function],
        },
      },
    },
  },
  "updater": Updater {
    "_callbacks": Array [],
    "_renderer": ReactShallowRenderer {
      "_context": Object {},
      "_element": <ReleasyProvider
        config={
          Config {
            "cache": null,
            "devTools": false,
            "link": Link {
              "fetch": [Function],
              "fetchTimeout": 30000,
              "headers": Object {},
              "retryDelays": Array [
                1000,
                3000,
                5000,
                10000,
              ],
              "url": "/graphql",
            },
            "networkLogger": false,
          }
        }
      >
        <div />
      </ReleasyProvider>,
      "_forcedUpdate": false,
      "_instance": [Circular],
      "_newState": null,
      "_rendered": <Context.Provider
        value={
          Object {
            "config": Config {
              "cache": null,
              "devTools": false,
              "link": Link {
                "fetch": [Function],
                "fetchTimeout": 30000,
                "headers": Object {},
                "retryDelays": Array [
                  1000,
                  3000,
                  5000,
                  10000,
                ],
                "url": "/graphql",
              },
              "networkLogger": false,
            },
            "environment": RelayModernEnvironment {
              "__setNet": [Function],
              "_deferrableSelections": Set {},
              "_network": Object {
                "execute": [Function],
                "executeWithEvents": [Function],
              },
              "_publishQueue": RelayPublishQueue {
                "_appliedOptimisticUpdates": Set {},
                "_backup": Object {},
                "_handlerProvider": [Function],
                "_pendingBackupRebase": false,
                "_pendingData": Set {},
                "_pendingOptimisticUpdates": Set {},
                "_pendingUpdaters": Set {},
                "_store": RelayMarkSweepStore {
                  "_gcEnabled": true,
                  "_hasScheduledGC": false,
                  "_index": 0,
                  "_recordSource": Object {},
                  "_roots": Map {},
                  "_subscriptions": Set {},
                  "_updatedRecordIDs": Object {},
                },
              },
              "_store": RelayMarkSweepStore {
                "_gcEnabled": true,
                "_hasScheduledGC": false,
                "_index": 0,
                "_recordSource": Object {},
                "_roots": Map {},
                "_subscriptions": Set {},
                "_updatedRecordIDs": Object {},
              },
              "configName": undefined,
              "unstable_internal": Object {
                "areEqualSelectors": [Function],
                "createFragmentSpecResolver": [Function],
                "createOperationSelector": [Function],
                "getDataIDsFromObject": [Function],
                "getFragment": [Function],
                "getRequest": [Function],
                "getSelector": [Function],
                "getSelectorList": [Function],
                "getSelectorsFromObject": [Function],
                "getVariablesFromObject": [Function],
              },
            },
          }
        }
      >
        <div />
      </Context.Provider>,
      "_rendering": false,
      "_updater": [Circular],
    },
  },
  Symbol(enzyme.__setState__): [Function],
}
`;
